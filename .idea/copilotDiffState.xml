<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/config/GoogleOAuth2SuccessHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/config/GoogleOAuth2SuccessHandler.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/config/security.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/config/security.java" />
              <option name="originalContent" value="package com.quantify.quantify_backend.config;&#10;&#10;import com.quantify.quantify_backend.service.google_user_service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;&#10;import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;&#10;import org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class security {&#10;&#10;    @Autowired&#10;    private google_user_service googleUserService;&#10;&#10;    @Bean&#10;    public SecurityFilterChain sec(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/&quot;, &quot;/login&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .oauth2Login(oauth -&gt; {&#10;                    oauth.userInfoEndpoint(userInfo -&gt; userInfo&#10;                            .userService(this.oauth2UserService())&#10;                    );&#10;                    oauth.defaultSuccessUrl(&quot;/loginsuccess&quot;, true);&#10;                })&#10;                .logout(l -&gt; l&#10;                        .logoutSuccessUrl(&quot;/&quot;)&#10;                );&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public OAuth2UserService&lt;OAuth2UserRequest, OAuth2User&gt; oauth2UserService() {&#10;        DefaultOAuth2UserService auth = new DefaultOAuth2UserService();&#10;&#10;        return userRequest -&gt; {&#10;            OAuth2User oAuth2User = auth.loadUser(userRequest);&#10;            googleUserService.processOAuthPostLogin(oAuth2User);&#10;            return oAuth2User;&#10;        };&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.quantify.quantify_backend.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class security {&#10;&#10;    @Bean&#10;    public SecurityFilterChain sec(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/&quot;, &quot;/login&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .oauth2Login(oauth -&gt; {&#10;                    oauth.defaultSuccessUrl(&quot;/&quot;, true);&#10;                })&#10;                .logout(l -&gt; l&#10;                        .logoutSuccessUrl(&quot;/&quot;).permitAll()&#10;                );&#10;&#10;        return http.build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/controller/home.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/controller/home.java" />
              <option name="originalContent" value="package com.quantify.quantify_backend.controller;&#10;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;public class home {&#10;&#10;    @GetMapping(&quot;/&quot;)&#10;    public String home(@AuthenticationPrincipal OAuth2User user) {&#10;        if (user != null) {&#10;            return &quot;Welcome back, &quot; + user.getAttribute(&quot;name&quot;) + &quot;! You are logged in. &lt;a href=\&quot;/logout\&quot;&gt;Logout&lt;/a&gt;&quot;;&#10;        }&#10;        return &quot;&lt;a href=\&quot;/oauth2/authorization/google\&quot;&gt;Login with Google&lt;/a&gt;&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/loginsuccess&quot;)&#10;    public String loginSuccess(@AuthenticationPrincipal OAuth2User user) {&#10;        if (user != null) {&#10;            return &quot;Login successful! Welcome, &quot; + user + &quot;.&quot;;&#10;        }&#10;        return &quot;Login failed. Please try again.&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.quantify.quantify_backend.controller;&#10;&#10;import com.quantify.quantify_backend.model.balance;&#10;import com.quantify.quantify_backend.model.user;&#10;import com.quantify.quantify_backend.repository.user_repo;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;public class home {&#10;&#10;    @Autowired&#10;    private user_repo userRepo;&#10;&#10;    @GetMapping(&quot;/&quot;)&#10;    public String home(@AuthenticationPrincipal OAuth2User user) {&#10;        if (user != null) {&#10;            String googleId = user.getAttribute(&quot;sub&quot;);&#10;            user existUser = userRepo.findByGoogleId(googleId);&#10;&#10;            if (existUser == null) {&#10;                user newUser = new user();&#10;                String email = user.getAttribute(&quot;email&quot;);&#10;                String name = user.getAttribute(&quot;name&quot;);&#10;                newUser.setGoogleId(googleId);&#10;                newUser.setEmail(email);&#10;                newUser.setUsername(name);&#10;                newUser.setPassword(&quot;&quot;); &#10;&#10;                balance newBalance = new balance();&#10;                newBalance.setAmount(100000.0); &#10;                newBalance.setUser(newUser);&#10;                newUser.setBalance(newBalance);&#10;&#10;                userRepo.save(newUser);&#10;            }&#10;&#10;            return &quot;Welcome back, &quot; + user.getAttribute(&quot;name&quot;) + &quot;! You are logged in. &lt;a href=\&quot;/logout\&quot;&gt;Logout&lt;/a&gt;&quot;;&#10;        }&#10;        return &quot;&lt;a href=\&quot;/oauth2/authorization/google\&quot;&gt;Login with Google&lt;/a&gt;&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/loginsuccess&quot;)&#10;    public String loginSuccess(@AuthenticationPrincipal OAuth2User user) {&#10;        if (user != null) {&#10;            return &quot;Login successful! Welcome, &quot; + user + &quot;.&quot;;&#10;        }&#10;        return &quot;Login failed. Please try again.&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/model/user.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/model/user.java" />
              <option name="originalContent" value="package com.quantify.quantify_backend.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name=&quot;user&quot;)&#10;public class user {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.UUID)&#10;    @Column(name = &quot;user_id&quot;)&#10;    private String userId;&#10;&#10;    @Column(name=&quot;google_id&quot;, unique = true)&#10;    private String googleId;&#10;&#10;    @Column(name = &quot;username&quot;)&#10;    private String username;&#10;&#10;    @Column(name=&quot;password&quot;)&#10;    private String password;&#10;&#10;    @Column(name = &quot;email&quot;)&#10;    private String email;&#10;&#10;    @OneToOne(cascade = CascadeType.ALL, fetch=FetchType.LAZY)&#10;    @JoinColumn(name=&quot;balance_id&quot;)&#10;    private balance balance;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;holding&gt; holdings;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;watchlist&gt; watchlists;&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public balance getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    public void setBalance(balance balance) {&#10;        this.balance = balance;&#10;    }&#10;&#10;    public List&lt;holding&gt; getHoldings() {&#10;        return holdings;&#10;    }&#10;&#10;    public void setHoldings(List&lt;holding&gt; holdings) {&#10;        this.holdings = holdings;&#10;    }&#10;&#10;    public List&lt;watchlist&gt; getWatchlists() {&#10;        return watchlists;&#10;    }&#10;&#10;    public void setWatchlists(List&lt;watchlist&gt; watchlists) {&#10;        this.watchlists = watchlists;&#10;    }&#10;&#10;    public String getGoogleId() {&#10;        return googleId;&#10;    }&#10;&#10;    public void setGoogleId(String googleId) {&#10;        this.googleId = googleId;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;user{&quot; +&#10;                &quot;userId='&quot; + userId + '\'' +&#10;                &quot;, googleId='&quot; + googleId + '\'' +&#10;                &quot;, username='&quot; + username + '\'' +&#10;                &quot;, password='&quot; + password + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                '}';&#10;    }&#10;&#10;    public user() {&#10;    }&#10;&#10;    public user(String userId, String username, String password, String email) {&#10;        this.userId = userId;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;    }&#10;&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.quantify.quantify_backend.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name=&quot;user&quot;)&#10;public class user {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.UUID)&#10;    @Column(name = &quot;user_id&quot;)&#10;    private String userId;&#10;&#10;    @Column(name=&quot;google_id&quot;, unique = true)&#10;    private String googleId;&#10;&#10;    @Column(name = &quot;username&quot;)&#10;    private String username;&#10;&#10;    @Column(name=&quot;password&quot;)&#10;    private String password;&#10;&#10;    @Column(name = &quot;email&quot;)&#10;    private String email;&#10;&#10;    @OneToOne(cascade = CascadeType.ALL, fetch=FetchType.LAZY)&#10;    @JoinColumn(name=&quot;balance_id&quot;)&#10;    private balance balance;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;holding&gt; holdings;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;watchlist&gt; watchlists;&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public balance getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    public void setBalance(balance balance) {&#10;        this.balance = balance;&#10;    }&#10;&#10;    public List&lt;holding&gt; getHoldings() {&#10;        return holdings;&#10;    }&#10;&#10;    public void setHoldings(List&lt;holding&gt; holdings) {&#10;        this.holdings = holdings;&#10;    }&#10;&#10;    public List&lt;watchlist&gt; getWatchlists() {&#10;        return watchlists;&#10;    }&#10;&#10;    public void setWatchlists(List&lt;watchlist&gt; watchlists) {&#10;        this.watchlists = watchlists;&#10;    }&#10;&#10;    public String getGoogleId() {&#10;        return googleId;&#10;    }&#10;&#10;    public void setGoogleId(String googleId) {&#10;        this.googleId = googleId;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;user{&quot; +&#10;                &quot;userId='&quot; + userId + '\'' +&#10;                &quot;, googleId='&quot; + googleId + '\'' +&#10;                &quot;, username='&quot; + username + '\'' +&#10;                &quot;, password='&quot; + password + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                '}';&#10;    }&#10;&#10;    public user() {&#10;    }&#10;&#10;    public user(String userId, String username, String password, String email) {&#10;        this.userId = userId;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;    }&#10;&#10;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/service/CustomOAuth2UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/service/CustomOAuth2UserService.java" />
              <option name="updatedContent" value="package com.quantify.quantify_backend.service;&#10;&#10;import com.quantify.quantify_backend.model.user;&#10;import com.quantify.quantify_backend.repository.user_repo;&#10;import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;&#10;import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;&#10;import java.util.Map;&#10;&#10;@Service&#10;public class CustomOAuth2UserService extends DefaultOAuth2UserService {&#10;&#10;    @Autowired&#10;    private user_repo userRepo;&#10;&#10;    @Override&#10;    public OAuth2User loadUser(OAuth2UserRequest userRequest) {&#10;        OAuth2User oAuth2User = super.loadUser(userRequest);&#10;        Map&lt;String, Object&gt; attributes = oAuth2User.getAttributes();&#10;&#10;        // Extract user info from Google attributes&#10;        String googleId = (String) attributes.get(&quot;sub&quot;);&#10;        String email = (String) attributes.get(&quot;email&quot;);&#10;        String username = (String) attributes.getOrDefault(&quot;name&quot;, email);&#10;&#10;        // Check if user exists&#10;        user existingUser = userRepo.findByGoogleId(googleId);&#10;        if (existingUser == null) {&#10;            // Create new user&#10;            user newUser = new user();&#10;            newUser.setGoogleId(googleId);&#10;            newUser.setEmail(email);&#10;            newUser.setUsername(username);&#10;            newUser.setPassword(&quot;&quot;); // No password for OAuth users&#10;            userRepo.save(newUser);&#10;        } else {&#10;            // Optionally update user info&#10;            existingUser.setEmail(email);&#10;            existingUser.setUsername(username);&#10;            userRepo.save(existingUser);&#10;        }&#10;        return oAuth2User;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/service/google_user_service.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/java/com/quantify/quantify_backend/service/google_user_service.java" />
              <option name="originalContent" value="package com.quantify.quantify_backend.service;&#10;&#10;import com.quantify.quantify_backend.model.user;&#10;import com.quantify.quantify_backend.repository.user_repo;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.UUID;&#10;&#10;@Service&#10;public class google_user_service {&#10;&#10;    @Autowired&#10;    private user_repo userRepo;&#10;&#10;    public user processOAuthPostLogin(OAuth2User oAuth2User) {&#10;        String googleId = oAuth2User.getAttribute(&quot;sub&quot;);&#10;        user existUser = userRepo.findByGoogleId(googleId);&#10;&#10;        if (existUser == null) {&#10;            // If user doesn't exist, create a new one&#10;            user newUser = new user();&#10;            String email = oAuth2User.getAttribute(&quot;email&quot;);&#10;            String name = oAuth2User.getAttribute(&quot;name&quot;);&#10;            newUser.setGoogleId(googleId);&#10;            newUser.setEmail(email);&#10;            newUser.setUsername(name);&#10;            newUser.setPassword(&quot;&quot;); // Not needed for OAuth users&#10;&#10;            System.out.println(&quot;UserService: Creating new user with email: &quot; + email);&#10;            return userRepo.save(newUser);&#10;        } else {&#10;            // Optionally update user info if it has changed&#10;            String email = oAuth2User.getAttribute(&quot;email&quot;);&#10;            String name = oAuth2User.getAttribute(&quot;name&quot;);&#10;            existUser.setEmail(email);&#10;            existUser.setUsername(name);&#10;            userRepo.save(existUser);&#10;            System.out.println(&quot;UserService: Found and updated existing user with email: &quot; + email);&#10;            return existUser;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.quantify.quantify_backend.service;&#10;&#10;import com.quantify.quantify_backend.model.balance;&#10;import com.quantify.quantify_backend.model.user;&#10;import com.quantify.quantify_backend.repository.user_repo;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.UUID;&#10;&#10;@Service&#10;public class google_user_service {&#10;&#10;    @Autowired&#10;    private user_repo userRepo;&#10;&#10;    public user processOAuthPostLogin(OAuth2User oAuth2User) {&#10;        String googleId = oAuth2User.getAttribute(&quot;sub&quot;);&#10;        user existUser = userRepo.findByGoogleId(googleId);&#10;&#10;        if (existUser == null) {&#10;            // If user doesn't exist, create a new one&#10;            user newUser = new user();&#10;            String email = oAuth2User.getAttribute(&quot;email&quot;);&#10;            String name = oAuth2User.getAttribute(&quot;name&quot;);&#10;            newUser.setGoogleId(googleId);&#10;            newUser.setEmail(email);&#10;            newUser.setUsername(name);&#10;            newUser.setPassword(&quot;&quot;); // Not needed for OAuth users&#10;&#10;            // Create a new balance for the user&#10;            balance newBalance = new balance();&#10;            newBalance.setAmount(100000.0); // Initial balance&#10;            newBalance.setUser(newUser);&#10;            newUser.setBalance(newBalance);&#10;&#10;&#10;            System.out.println(&quot;UserService: Creating new user with email: &quot; + email);&#10;            return userRepo.save(newUser);&#10;        } else {&#10;            // Optionally update user info if it has changed&#10;            String email = oAuth2User.getAttribute(&quot;email&quot;);&#10;            String name = oAuth2User.getAttribute(&quot;name&quot;);&#10;            existUser.setEmail(email);&#10;            existUser.setUsername(name);&#10;            userRepo.save(existUser);&#10;            System.out.println(&quot;UserService: Found and updated existing user with email: &quot; + email);&#10;            return existUser;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=quantify-backend&#10;&#10;# 1. The URL from the Session Pooler (port 5432)&#10;spring.datasource.url=jdbc:postgresql://aws-0-ap-south-1.pooler.supabase.com:5432/postgres&#10;&#10;# 2. The username and password&#10;spring.datasource.username=postgres.zsxzydkurtzjzwcqndmw&#10;spring.datasource.password=quantifyqpzmal&#10;&#10;# secutity&#10;spring.security.user.name=admin&#10;spring.security.user.password=admin&#10;&#10;# Google auth&#10;spring.security.oauth2.client.registration.google.client-id=60142871865-16s3qi6b7io6n6ue103khv79s07vg1d4.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=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&#10;spring.security.oauth2.client.registration.google.scope=openid,profile,email&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google&#10;&#10;# JPA/Hibernate&#10;spring.jpa.hibernate.ddl-auto=update" />
              <option name="updatedContent" value="spring.application.name=quantify-backend&#10;&#10;# 1. The URL from the Session Pooler (port 5432)&#10;spring.datasource.url=jdbc:postgresql://aws-0-ap-south-1.pooler.supabase.com:5432/postgres&#10;&#10;# 2. The username and password&#10;spring.datasource.username=postgres.zsxzydkurtzjzwcqndmw&#10;spring.datasource.password=quantifyqpzmal&#10;&#10;# secutity&#10;spring.security.user.name=admin&#10;spring.security.user.password=admin&#10;&#10;# Google auth&#10;spring.security.oauth2.client.registration.google.client-id=60142871865-16s3qi6b7io6n6ue103khv79s07vg1d4.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=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&#10;spring.security.oauth2.client.registration.google.scope=openid,profile,email&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google&#10;&#10;# JPA/Hibernate&#10;spring.jpa.hibernate.ddl-auto=update" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/src/main/resources/static/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/src/main/resources/static/index.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>